# revinfrastruct dev environment
version: '2'
services:
  # The `main` container will act as a reverse proxy and should be the only
  # service exposed to the outside (notice the `ports` property). The `links`
  # property makes sure it can reference the other containers (by their
  # hostnames). It runs a combination of nginx, registrator and consul for
  # service discovery.
  main:
    image: nginx
    ports:
      - "8080:80"
    links:
      # This makes `samplesite` hostname reachable from this container.
      - samplesite
    volumes:
      - ./nginx:/etc/nginx/conf.d/docker
    # This command takes our supplied config and runs it through envsubst to
    # replace all our environment variables, allowing us to use the variables
    # in our conf template. It also starts nginx in foreground mode.
    command: /bin/bash -c "envsubst < /etc/nginx/conf.d/docker/default.conf > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  consul:
    command: -server -bootstrap -advertise 10.0.2.15
    image: progrium/consul:latest
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
      - "8600:53/udp"
  registrator:
    command: -ip=10.0.2.15 consul://consul:8500
    image: gliderlabs/registrator:latest
    links:
      - consul
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"

  # We are including the sample site in our local repo here, but the idea is
  # that every service pulls itself and its associated Dockerfile from its
  # respective git repository
  samplesite:
    build: ./sample-site
    command: /bin/bash -c "cd /usr/src/app && npm start"
  #  build:
  #    # Like so:
  #    context: https://github.com/revinfrastruct/sandbox.git
